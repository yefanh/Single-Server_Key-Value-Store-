Assignment Overview

This project involved the development of a single-threaded key-value store server accessible through both TCP and UDP network protocols. The server was designed to handle three basic operations: PUT (to store key-value pairs), GET (to retrieve values associated with keys), and DELETE (to remove key-value pairs from the store). The implementation required creating separate client and server applications for both TCP and UDP. The system uses sockets for network communication, implements a basic data exchange protocol, and features timestamped logging and error handling. Each client pre-populates the key-value store and performs at least five of each operation (PUT, GET, DELETE). The goal was to demonstrate an understanding of socket programming, network protocols, and basic data storage.

Technical Impression

Implementing the key-value store server across two different protocols (TCP and UDP) presented unique challenges. The initial complexity was in understanding and implementing a protocol that works on both protocols. TCP's reliable, connection-oriented nature made it simpler to handle data transfer but required explicit management of socket connections. Conversely, UDP's connectionless characteristic necessitated explicit handling for dropped packets and the server being able to receive malformed packets without crashing. Designing a byte-based protocol for use in both TCP and UDP proved to be challenging. I also faced issues initially with how to handle spaces in the value for the TCP protocol, and initially also had issues with parsing the string of GET and DELETE requests, and these were solved by modifying the way I used the String.split function in the `handleClient` method in the `TCPServer.java`. Another key challenge was ensuring the server did not crash when receiving malformed UDP packets, and implementing different handling for malformed packets, versus malformed requests. Using a combination of try-catch blocks, and checking the formatting of the strings, and the bytes, I was able to handle all of these cases. Finally, implementing detailed logging with timestamps was essential for debugging and validating the different components, and this has allowed me to find and fix bugs in my implementation. The project reinforced my understanding of network programming, protocol design, and the importance of robust error handling in distributed systems.

Use Case

This key-value store system can serve as a basic building block for several practical applications. For example, in a web application, it could be used as a caching mechanism for frequently accessed data like user session details, configuration settings, or search results. By storing such data in the key-value store, the application can reduce the load on the primary database, leading to faster response times and improved scalability. Furthermore, this key-value store could be a simple database for small-scale applications, and this can also be used as a base to expand to a distributed key-value store in a large distributed system. The ability to use both TCP and UDP provides flexibility depending on application requirements; TCP for reliability-focused scenarios, and UDP for higher speed.